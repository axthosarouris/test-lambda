AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31

Description: "A small description of the template"

Resources:
  LambdaApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: develop
      Cors: "'*'"
      Auth:
        ApiKeyRequired: false
        DefaultAuthorizer: MyCognAuthorizer
        Authorizers:
          MyCognAuthorizer:
            UserPoolArn: arn:aws:cognito-idp:eu-west-1:770565769150:userpool/eu-west-1_QzzhX0cnE

  UserRole:
    DependsOn: PublicationsTable
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
              Action:
                - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: UserLambdaAccess
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: "*"
        - PolicyName: UserDynamoAccess
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - "dynamodb:GetItem"
                  - "dynamodb:Query"
                Resource:  !GetAtt PublicationsTable.Arn
                Condition:
                  "ForAllValues:StringLike":
                    "dynamodb:LeadingKeys": ["*${accounts.google.com:sub}*"]
        - PolicyName: DynamoDBPutPolicy
            PolicyDocument:
              Version: 2012-10-17
              Statement:
                - Effect: Allow
                  Action:
                    - "dynamodb:PutItem"
                    - "dynamodb:DescribeTable"
                  Resource: !GetAtt PublicationsTable.Arn
/*
"Effect": "Allow",
            "Action": "sts:AssumeRoleWithSAML",
            "Principal": {"Federated": "arn:aws:iam::ACCOUNT-ID-WITHOUT-HYPHENS:saml-provider/PROVIDER-NAME"},
            "Condition": {"StringEquals": {"SAML:aud": "https://signin.aws.amazon.com/saml"}}
  */
  LambdaRole:
    DependsOn: PublicationsTable
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
          - Effect: Alllow
            Principal:

      Path: /
      Policies:
        - PolicyName: LambdaAccessPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: "*"
  PublicationsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      TableName: Publications
      BillingMode: PROVISIONED
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      KeySchema:
        - AttributeName: id
          KeyType: HASH

  MyLambda:
    DependsOn: LambdaRole
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: .
      Runtime: java11
      Handler: lambda.LambdaHandler::handleRequest
      #This role can be created here in the template
      Role: !GetAtt LambdaRole.Arn
      MemorySize: 1400
      Timeout: 60
      Environment:
        Variables:
          ALLOWED_ORIGIN: '*'
      Events:
          LambdaApi:
            Type: Api
            Properties:
              Path: /hello/
              Method: get
              RestApiId: !Ref LambdaApi